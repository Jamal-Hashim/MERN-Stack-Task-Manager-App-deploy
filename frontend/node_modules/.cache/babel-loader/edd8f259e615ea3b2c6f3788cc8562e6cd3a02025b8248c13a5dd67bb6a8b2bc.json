{"ast":null,"code":"// import { useEffect, useState } from 'react';\n// import { FaCheck, FaPenAlt, FaPlus, FaSearch, FaTrash } from \"react-icons/fa\";\n// import { toast, ToastContainer } from 'react-toastify';\n// import { createTask, DeleteTaskById, getAllTaks, UpdateTaskById } from './api';\n// import { notify } from './utils';\n\n// function TaskManager() {\n\n//     const [input, setInput] = useState('');\n//     const [tasks, setTasks] = useState([]);\n//     const [copyTask, setCopyTask] = useState([]);\n//     const [updateTask, setUpdateTask] = useState(null);\n\n//     const handleTask = () => {\n//         if (updateTask && input) {\n//             // update api call\n//             const obj = {\n//                 taskName: input,\n//                 isDone: updateTask.isDone,\n//                 _id: updateTask._id\n//             }\n//             handleUpdate(obj);\n\n//         } else if (updateTask === null && input) {\n//             // Create api call\n\n//             handleAddTask();\n//         }\n//         setInput('');\n//     }\n\n//     useEffect(() => {\n//         if (updateTask) {\n//             setInput(updateTask.taskName);\n//         }\n//     }, [updateTask]);\n\n//     const handleAddTask = async () => {\n//         const obj = {\n//             taskName: input,\n//             isDone: false\n//         }\n//         try {\n//             const { success, message } = await createTask(obj);\n//             if (success) {\n//                 // show succes toast\n//                 notify(message, 'success');\n//             } else {\n//                 // show error toast\n//                 notify(message, 'error');\n//             }\n//             fetchAllTasks();\n\n//         } catch (error) {\n//             console.error(error);\n//             notify(\"Failed to Create to Task\", 'error');\n//         }\n\n//     }\n\n//     const fetchAllTasks = async () => {\n//         try {\n//             const { data } = await getAllTaks();\n//             setTasks(data);\n//             setCopyTask(data);\n\n//         } catch (error) {\n//             console.error(error);\n//             notify(\"Failed to Create to Task\", 'error');\n//         }\n//     }\n//     useEffect(() => {\n//         fetchAllTasks();\n//     }, []);\n\n//     const handleDeleteTask = async (id) => {\n//         try {\n//             const { success, message } = await DeleteTaskById(id);\n//             if (success) {\n//                 // show succes toast\n//                 notify(message, 'success');\n//             } else {\n//                 // show error toast\n//                 notify(message, 'error');\n//             }\n//             fetchAllTasks();\n\n//         } catch (error) {\n//             console.error(error);\n//             notify(\"Failed to Create to Task\", 'error');\n//         }\n//     }\n\n//     const handleCheckAndUncheck = async (item) => {\n//         const { _id, isDone, taskName } = item;\n//         const obj = {\n//             taskName,\n//             isDone: !isDone\n//         }\n//         try {\n//             const { success, message } = await UpdateTaskById(_id, obj)\n//             if (success) {\n//                 // show succes toast\n//                 notify(message, 'success');\n//             } else {\n//                 // show error toast\n//                 notify(message, 'error');\n//             }\n//             fetchAllTasks();\n\n//         } catch (error) {\n//             console.error(error);\n//             notify(\"Failed to Create to Task\", 'error');\n//         }\n//     }\n\n//     const handleUpdate = async (item) => {\n//         const { _id, isDone, taskName } = item;\n//         const obj = {\n//             taskName,\n//             isDone: isDone\n//         }\n//         try {\n//             const { success, message } = await UpdateTaskById(_id, obj)\n//             if (success) {\n//                 // show succes toast\n//                 notify(message, 'success');\n//             } else {\n//                 // show error toast\n//                 notify(message, 'error');\n//             }\n//             fetchAllTasks();\n\n//         } catch (error) {\n//             console.error(error);\n//             notify(\"Failed to Create to Task\", 'error');\n//         }\n//     }\n\n//     const handleSearch = (e) => {\n//         const term = e.target.value.toLowerCase();\n//         const oldTasks = [...copyTask];\n//         const results = oldTasks.filter((item) => item.taskName.toLowerCase().includes(term));\n//         setTasks(results);\n//     }\n\n//     return (\n//         <div className='d-flex flex-column align-items-center w-50 m-auto mt-5'>\n//             <h1 className='mb-4'>Task Manager</h1>\n\n//             {/* Input and Search Box */}\n\n//             <div className='d-flex justify-content-between align-items-center mb-4 w-100'>\n//                 <div className='input-group flex-grow-1 me-2'>\n//                     <input value={input} onChange={(e) => setInput(e.target.value)} type=\"text\" placeholder='Add a new Task' className='form-control mw-1' />\n//                     <button onClick={handleTask} className='btn btn-success btn-sm me-2'>\n//                         <FaPlus className='m-2' />\n//                     </button>\n//                 </div>\n//                 <div className='input-group flex-grow-1'>\n//                     <span className='input-group-text'>\n//                         <FaSearch />\n//                     </span>\n//                     <input onChange={handleSearch} type=\"text\" placeholder='Search Task' className='form-control mw-1' />\n//                 </div>\n//             </div>\n\n//             {/* Lists of items */}\n\n//             <div className='d-flex flex-column w-100'>\n//                 {\n//                     tasks.map((item) => (\n//                         <div key={item._id} className=\"m-2 p-2 border bg-light w-100 rounded-3 d-flex justify-content-between align-items-center flex-wrap\">\n//                             <span className={item.isDone ? 'text-decoration-line-through' : ''}>{item.taskName}</span>\n//                             <div className=\"mt-2 mt-sm-0\">\n//                                 <button onClick={() => handleCheckAndUncheck(item)}\n//                                     className='btn btn-success btn-sm me-2' type='button'>\n//                                     <FaCheck />\n//                                 </button>\n//                                 <button onClick={() => setUpdateTask(item)}\n//                                     className='btn btn-primary btn-sm me-2' type='button'>\n//                                     <FaPenAlt />\n//                                 </button>\n//                                 <button onClick={() => handleDeleteTask(item._id)}\n//                                     className='btn btn-danger btn-sm me-2' type='button'>\n//                                     <FaTrash />\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     ))\n//                 }\n//             </div>\n\n//             {/* Toastify */}\n\n//             <ToastContainer position='top-right' autoClose={3000} hideProgressBar={false} />\n//         </div>\n//     )\n// }\n// export default TaskManager;","map":{"version":3,"names":[],"sources":["D:/Projects/Project Task Manager App/frontend/src/TaskManager.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\r\n// import { FaCheck, FaPenAlt, FaPlus, FaSearch, FaTrash } from \"react-icons/fa\";\r\n// import { toast, ToastContainer } from 'react-toastify';\r\n// import { createTask, DeleteTaskById, getAllTaks, UpdateTaskById } from './api';\r\n// import { notify } from './utils';\r\n\r\n// function TaskManager() {\r\n\r\n//     const [input, setInput] = useState('');\r\n//     const [tasks, setTasks] = useState([]);\r\n//     const [copyTask, setCopyTask] = useState([]);\r\n//     const [updateTask, setUpdateTask] = useState(null);\r\n\r\n//     const handleTask = () => {\r\n//         if (updateTask && input) {\r\n//             // update api call\r\n//             const obj = {\r\n//                 taskName: input,\r\n//                 isDone: updateTask.isDone,\r\n//                 _id: updateTask._id\r\n//             }\r\n//             handleUpdate(obj);\r\n\r\n//         } else if (updateTask === null && input) {\r\n//             // Create api call\r\n\r\n//             handleAddTask();\r\n//         }\r\n//         setInput('');\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         if (updateTask) {\r\n//             setInput(updateTask.taskName);\r\n//         }\r\n//     }, [updateTask]);\r\n\r\n//     const handleAddTask = async () => {\r\n//         const obj = {\r\n//             taskName: input,\r\n//             isDone: false\r\n//         }\r\n//         try {\r\n//             const { success, message } = await createTask(obj);\r\n//             if (success) {\r\n//                 // show succes toast\r\n//                 notify(message, 'success');\r\n//             } else {\r\n//                 // show error toast\r\n//                 notify(message, 'error');\r\n//             }\r\n//             fetchAllTasks();\r\n\r\n//         } catch (error) {\r\n//             console.error(error);\r\n//             notify(\"Failed to Create to Task\", 'error');\r\n//         }\r\n\r\n//     }\r\n\r\n//     const fetchAllTasks = async () => {\r\n//         try {\r\n//             const { data } = await getAllTaks();\r\n//             setTasks(data);\r\n//             setCopyTask(data);\r\n\r\n//         } catch (error) {\r\n//             console.error(error);\r\n//             notify(\"Failed to Create to Task\", 'error');\r\n//         }\r\n//     }\r\n//     useEffect(() => {\r\n//         fetchAllTasks();\r\n//     }, []);\r\n\r\n//     const handleDeleteTask = async (id) => {\r\n//         try {\r\n//             const { success, message } = await DeleteTaskById(id);\r\n//             if (success) {\r\n//                 // show succes toast\r\n//                 notify(message, 'success');\r\n//             } else {\r\n//                 // show error toast\r\n//                 notify(message, 'error');\r\n//             }\r\n//             fetchAllTasks();\r\n\r\n//         } catch (error) {\r\n//             console.error(error);\r\n//             notify(\"Failed to Create to Task\", 'error');\r\n//         }\r\n//     }\r\n\r\n//     const handleCheckAndUncheck = async (item) => {\r\n//         const { _id, isDone, taskName } = item;\r\n//         const obj = {\r\n//             taskName,\r\n//             isDone: !isDone\r\n//         }\r\n//         try {\r\n//             const { success, message } = await UpdateTaskById(_id, obj)\r\n//             if (success) {\r\n//                 // show succes toast\r\n//                 notify(message, 'success');\r\n//             } else {\r\n//                 // show error toast\r\n//                 notify(message, 'error');\r\n//             }\r\n//             fetchAllTasks();\r\n\r\n//         } catch (error) {\r\n//             console.error(error);\r\n//             notify(\"Failed to Create to Task\", 'error');\r\n//         }\r\n//     }\r\n\r\n//     const handleUpdate = async (item) => {\r\n//         const { _id, isDone, taskName } = item;\r\n//         const obj = {\r\n//             taskName,\r\n//             isDone: isDone\r\n//         }\r\n//         try {\r\n//             const { success, message } = await UpdateTaskById(_id, obj)\r\n//             if (success) {\r\n//                 // show succes toast\r\n//                 notify(message, 'success');\r\n//             } else {\r\n//                 // show error toast\r\n//                 notify(message, 'error');\r\n//             }\r\n//             fetchAllTasks();\r\n\r\n//         } catch (error) {\r\n//             console.error(error);\r\n//             notify(\"Failed to Create to Task\", 'error');\r\n//         }\r\n//     }\r\n\r\n//     const handleSearch = (e) => {\r\n//         const term = e.target.value.toLowerCase();\r\n//         const oldTasks = [...copyTask];\r\n//         const results = oldTasks.filter((item) => item.taskName.toLowerCase().includes(term));\r\n//         setTasks(results);\r\n//     }\r\n\r\n//     return (\r\n//         <div className='d-flex flex-column align-items-center w-50 m-auto mt-5'>\r\n//             <h1 className='mb-4'>Task Manager</h1>\r\n\r\n//             {/* Input and Search Box */}\r\n\r\n//             <div className='d-flex justify-content-between align-items-center mb-4 w-100'>\r\n//                 <div className='input-group flex-grow-1 me-2'>\r\n//                     <input value={input} onChange={(e) => setInput(e.target.value)} type=\"text\" placeholder='Add a new Task' className='form-control mw-1' />\r\n//                     <button onClick={handleTask} className='btn btn-success btn-sm me-2'>\r\n//                         <FaPlus className='m-2' />\r\n//                     </button>\r\n//                 </div>\r\n//                 <div className='input-group flex-grow-1'>\r\n//                     <span className='input-group-text'>\r\n//                         <FaSearch />\r\n//                     </span>\r\n//                     <input onChange={handleSearch} type=\"text\" placeholder='Search Task' className='form-control mw-1' />\r\n//                 </div>\r\n//             </div>\r\n\r\n//             {/* Lists of items */}\r\n\r\n//             <div className='d-flex flex-column w-100'>\r\n//                 {\r\n//                     tasks.map((item) => (\r\n//                         <div key={item._id} className=\"m-2 p-2 border bg-light w-100 rounded-3 d-flex justify-content-between align-items-center flex-wrap\">\r\n//                             <span className={item.isDone ? 'text-decoration-line-through' : ''}>{item.taskName}</span>\r\n//                             <div className=\"mt-2 mt-sm-0\">\r\n//                                 <button onClick={() => handleCheckAndUncheck(item)}\r\n//                                     className='btn btn-success btn-sm me-2' type='button'>\r\n//                                     <FaCheck />\r\n//                                 </button>\r\n//                                 <button onClick={() => setUpdateTask(item)}\r\n//                                     className='btn btn-primary btn-sm me-2' type='button'>\r\n//                                     <FaPenAlt />\r\n//                                 </button>\r\n//                                 <button onClick={() => handleDeleteTask(item._id)}\r\n//                                     className='btn btn-danger btn-sm me-2' type='button'>\r\n//                                     <FaTrash />\r\n//                                 </button>\r\n//                             </div>\r\n//                         </div>\r\n//                     ))\r\n//                 }\r\n//             </div>\r\n\r\n//             {/* Toastify */}\r\n\r\n//             <ToastContainer position='top-right' autoClose={3000} hideProgressBar={false} />\r\n//         </div>\r\n//     )\r\n// }\r\n// export default TaskManager;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}