{"ast":null,"code":"import { API_URL } from './utils';\nexport const createTask = async taskobj => {\n  const url = `${API_URL}/tasks`;\n  const option = {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(taskobj)\n  };\n  try {\n    const result = await fetch(url, option);\n    const data = await result.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\nexport const getAllTaks = async () => {\n  const url = `${API_URL}/tasks`;\n  const option = {\n    method: \"GET\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, option);\n    const data = await result.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n\n// export const DeleteTaskById = async (id) => {\n//     const url = `${API_URL}/tasks/${id}`;\n//     console.log(url);\n\n//     const options = {\n//         method: \"DELETE\",\n//         headers: {\n//             'Content-Type': 'application/json',\n//         }\n//     };\n//     try {\n//         const result = await fetch(url, options);\n//         const data = await result.json();\n//         return data;\n//     } catch (error) {\n//         return error;\n//     }\n// }\n\nconst handleDeleteTask = async id => {\n  try {\n    const {\n      success,\n      message\n    } = await DeleteTaskById(id);\n    if (success) {\n      notify(message || \"Task deleted\", \"success\");\n\n      // Optimistic update\n      setTasks(prev => prev.filter(task => task._id !== id));\n      setCopyTask(prev => prev.filter(task => task._id !== id));\n    } else {\n      notify(message || \"Failed to delete task\", \"error\");\n    }\n  } catch (error) {\n    console.error(error);\n    notify(\"Failed to delete task\", \"error\");\n  }\n};\nexport const UpdateTaskById = async (id, reqBody) => {\n  const url = `${API_URL}/tasks/${id}`;\n  const option = {\n    method: \"PUT\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(reqBody)\n  };\n  try {\n    const result = await fetch(url, option);\n    const data = await result.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n_c = UpdateTaskById;\nvar _c;\n$RefreshReg$(_c, \"UpdateTaskById\");","map":{"version":3,"names":["API_URL","createTask","taskobj","url","option","method","headers","body","JSON","stringify","result","fetch","data","json","error","getAllTaks","handleDeleteTask","id","success","message","DeleteTaskById","notify","setTasks","prev","filter","task","_id","setCopyTask","console","UpdateTaskById","reqBody","_c","$RefreshReg$"],"sources":["D:/Projects/Project Task Manager App/frontend/src/api.js"],"sourcesContent":["\r\nimport { API_URL } from './utils';\r\n\r\nexport const createTask = async (taskobj) => {\r\n    const url = `${API_URL}/tasks`;\r\n\r\n    const option = {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(taskobj)\r\n    };\r\n    try {\r\n        const result = await fetch(url, option);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const getAllTaks = async () => {\r\n    const url = `${API_URL}/tasks`;\r\n\r\n    const option = {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        const result = await fetch(url, option);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\n// export const DeleteTaskById = async (id) => {\r\n//     const url = `${API_URL}/tasks/${id}`;\r\n//     console.log(url);\r\n    \r\n\r\n//     const options = {\r\n//         method: \"DELETE\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json',\r\n//         }\r\n//     };\r\n//     try {\r\n//         const result = await fetch(url, options);\r\n//         const data = await result.json();\r\n//         return data;\r\n//     } catch (error) {\r\n//         return error;\r\n//     }\r\n// }\r\n\r\nconst handleDeleteTask = async (id) => {\r\n  try {\r\n    const { success, message } = await DeleteTaskById(id);\r\n\r\n    if (success) {\r\n      notify(message || \"Task deleted\", \"success\");\r\n\r\n      // Optimistic update\r\n      setTasks((prev) => prev.filter((task) => task._id !== id));\r\n      setCopyTask((prev) => prev.filter((task) => task._id !== id));\r\n    } else {\r\n      notify(message || \"Failed to delete task\", \"error\");\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    notify(\"Failed to delete task\", \"error\");\r\n  }\r\n};\r\n\r\n\r\nexport const UpdateTaskById = async (id, reqBody) => {\r\n    const url = `${API_URL}/tasks/${id}`;\r\n\r\n    const option = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(reqBody)\r\n    };\r\n    try {\r\n        const result = await fetch(url, option);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}