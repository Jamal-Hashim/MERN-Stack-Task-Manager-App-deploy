{"ast":null,"code":"import { API_URL } from './utils';\nexport const createTask = async taskobj => {\n  const url = `${API_URL}/tasks`;\n  const option = {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(taskobj)\n  };\n  try {\n    const result = await fetch(url, option);\n    const data = await result.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\nexport const getAllTaks = async () => {\n  const url = `${API_URL}/tasks`;\n  const option = {\n    method: \"GET\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, option);\n    const data = await result.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\nexport const DeleteTaskById = async id => {\n  const url = `${API_URL}/tasks/${id}`;\n  const option = {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, option);\n    const data = await result.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n_c = DeleteTaskById;\nexport const UpdateTaskById = async (id, reqBody) => {\n  const url = `${API_URL}/tasks/${id}`;\n  const option = {\n    method: \"PUT\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(reqBody)\n  };\n  try {\n    const result = await fetch(url, option);\n    const data = await result.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n_c2 = UpdateTaskById;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeleteTaskById\");\n$RefreshReg$(_c2, \"UpdateTaskById\");","map":{"version":3,"names":["API_URL","createTask","taskobj","url","option","method","headers","body","JSON","stringify","result","fetch","data","json","error","getAllTaks","DeleteTaskById","id","_c","UpdateTaskById","reqBody","_c2","$RefreshReg$"],"sources":["D:/Projects/Project Task Manager App/frontend/src/api.js"],"sourcesContent":["\r\nimport { API_URL } from './utils';\r\n\r\nexport const createTask = async (taskobj) => {\r\n    const url = `${API_URL}/tasks`;\r\n\r\n    const option = {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(taskobj)\r\n    };\r\n    try {\r\n        const result = await fetch(url, option);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const getAllTaks = async () => {\r\n    const url = `${API_URL}/tasks`;\r\n\r\n    const option = {\r\n        method: \"GET\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        const result = await fetch(url, option);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const DeleteTaskById = async (id) => {\r\n    const url = `${API_URL}/tasks/${id}`;\r\n\r\n    const option = {\r\n        method: \"DELETE\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    };\r\n    try {\r\n        const result = await fetch(url, option);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const UpdateTaskById = async (id, reqBody) => {\r\n    const url = `${API_URL}/tasks/${id}`;\r\n\r\n    const option = {\r\n        method: \"PUT\",\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(reqBody)\r\n    };\r\n    try {\r\n        const result = await fetch(url, option);\r\n        const data = await result.json();\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,SAAS;AAEjC,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAO,IAAK;EACzC,MAAMC,GAAG,GAAG,GAAGH,OAAO,QAAQ;EAE9B,MAAMI,MAAM,GAAG;IACXC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;EAChC,CAAC;EACD,IAAI;IACA,MAAMQ,MAAM,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAEC,MAAM,CAAC;IACvC,MAAMQ,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAI,CAAC,CAAC;IAChC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAOA,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMZ,GAAG,GAAG,GAAGH,OAAO,QAAQ;EAE9B,MAAMI,MAAM,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EACD,IAAI;IACA,MAAMI,MAAM,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAEC,MAAM,CAAC;IACvC,MAAMQ,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAI,CAAC,CAAC;IAChC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAOA,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAME,cAAc,GAAG,MAAOC,EAAE,IAAK;EACxC,MAAMd,GAAG,GAAG,GAAGH,OAAO,UAAUiB,EAAE,EAAE;EAEpC,MAAMb,MAAM,GAAG;IACXC,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EACD,IAAI;IACA,MAAMI,MAAM,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAEC,MAAM,CAAC;IACvC,MAAMQ,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAI,CAAC,CAAC;IAChC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAOA,KAAK;EAChB;AACJ,CAAC;AAAAI,EAAA,GAhBYF,cAAc;AAkB3B,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAOF,EAAE,EAAEG,OAAO,KAAK;EACjD,MAAMjB,GAAG,GAAG,GAAGH,OAAO,UAAUiB,EAAE,EAAE;EAEpC,MAAMb,MAAM,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,OAAO;EAChC,CAAC;EACD,IAAI;IACA,MAAMV,MAAM,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAEC,MAAM,CAAC;IACvC,MAAMQ,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAI,CAAC,CAAC;IAChC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAOA,KAAK;EAChB;AACJ,CAAC;AAAAO,GAAA,GAjBYF,cAAc;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}